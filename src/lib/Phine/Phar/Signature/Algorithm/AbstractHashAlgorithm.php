<?php

namespace Phine\Phar\Signature\Algorithm;

use Phine\Phar\File\Reader;

/**
 * Provides the basis for a `hash()` supported signature algorithm.
 *
 * @author Kevin Herrera <kevin@herrera.io>
 */
abstract class AbstractHashAlgorithm implements AlgorithmInterface
{
    /**
     * {@inheritDoc}
     */
    public function readSignature(Reader $reader)
    {
        $size = $this->getSize();

        $reader->seek(-8 - $size, SEEK_END);

        $hash = unpack('H*', $reader->read($size));
        $hash = strtoupper($hash[1]);

        return array(
            'hash' => $hash,
            'hash_type' => $this->getName()
        );
    }

    /**
     * {@inheritDoc}
     */
    public function verifySignature(Reader $reader)
    {
        $expected = $this->readSignature($reader);

        $context = hash_init($this->getAlgorithm());

        $reader->seek(0);

        hash_update_stream(
            $context,
            $reader->getHandle(),
            $reader->getSize() - $this->getSize() - 8
        );

        $actual = strtoupper(hash_final($context));

        return ($expected['hash'] === $actual);
    }

    /**
     * Returns the algorithm name as recognized by `hash()`.
     *
     * @return string The name of the algorithm.
     */
    abstract protected function getAlgorithm();

    /**
     * Returns the name of the algorithm as returned by `Phar::getHash()`.
     *
     * @return string The name of the algorithm.
     */
    abstract protected function getName();

    /**
     * Returns the size of the hash generated by the algorithm.
     *
     * @return integer The size of the hash.
     */
    abstract protected function getSize();
}
